---
title: "Introduction to movepub"
author: "Peter Desmet"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Introduction to movepub}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup, message = FALSE}
library(frictionless)
library(movepub)
library(dplyr)
library(EML)
library(readr)
```

[fdp]: https://specs.frictionlessdata.io/data-package/
[frictionless-r]: https://frictionlessdata.github.io/frictionless-r/

## Make a Movebank dataset "frictionless" {#frictionless}

Frictionless Data is an open-source framework designed to remove common barriers to reading and understanding data. By transforming a Movebank dataset into a "Frictionless Data Package" ([Walsch and Pollock, 2017][fdp]), we create a set of files that is better documented and easier to read programmatically, compared to individual files downloaded from Movebank. It is also a necessary step before transforming to Darwin Core with `write_dwc()` (for data) and `write_eml()` (for metadata), because it standardizes file and field names.

Here we build a Frictionless Data Package by starting from a directory containing CSV data files in Movebank format (reference data and GPS data), and adding a `datapackage.json` file which provides persistent human- and machine-readable definitions of the contents of the CSV files. Let's try that on an existing dataset, published in the Movebank Data Repository:

> Griffin L (2014) Data from: Forecasting spring from afar? Timing of migration and predictability of phenology along different migration routes of an avian herbivore [Svalbard data]. Movebank Data Repository. <https://doi.org/10.5441/001/1.5k6b1364>

It consists of:

```{r}
reference_data <- "https://datarepository.movebank.org/server/api/core/bitstreams/a6e123b0-7588-40da-8f06-73559bb3ff6b/content"
gps_data <- "https://datarepository.movebank.org/server/api/core/bitstreams/df28a80e-e0c4-49fb-aa87-76ceb2d2b76f/content"
```

And its DOI:

```{r}
doi <- "https://doi.org/10.5441/001/1.5k6b1364" # Don't use a http://dx.doi URL and exclude "www."
```

Let's bundle that into a Frictionless Data Package:

```{r}
package <-
  frictionless::create_package() %>%
  append(c(id = doi), after = 0) %>%
  frictionless::create_package() %>% # Bug fix for https://github.com/frictionlessdata/frictionless-r/issues/198
  movepub::add_resource("reference-data", reference_data) %>%
  movepub::add_resource("gps", gps_data)
```

Here's what we did:

- Initiate a package with `frictionless::create_package()`.
- Add the DOI as package ID.
- Add our data as two resources: `reference-data` and `gps`. These names are standardized. By using the `movepub::add_resource()` (rather than the default `frictionless::add_resource()`) we also looked up the definition for each field in the [Movebank Attribute Dictionary](http://vocab.nerc.ac.uk/collection/MVB/current).

Here's an example of how a field is documented:

```{r}
package$resources[[1]]$schema$fields[[2]]
```

`package` can now be used to transform to Darwin Core (in the next step) or saved as a `datapackage.json` file for other uses:

```{r}
frictionless::write_package(package, "data/my_dataset")
```

## Transform a Movebank dataset to Darwin Core {#dwc}

A Movebank dataset can be converted to Darwin Core using `write_dwc()` and `write_eml()`. Let's try it out with a small dataset.

**O_ASSEN** is a bird GPS tracking study and dataset, available on [Movebank](https://www.movebank.org/cms/webapp?gwt_fragment=page=studies,path=study1605797471) and deposited on [Zenodo](https://doi.org/10.5281/zenodo.10053903).

`write_dwc()` requires the dataset to be structured as a [Frictionless Data Package][fdp] (recognizable by the presence of a `datapackage.json` file). That is the case for O_ASSEN on Zenodo, meaning it can be read with the [frictionless][frictionless-r] R package.

Let's create two directories:

```{r}
dir_source <- "data/o_assen/source" # Local directory for the source dataset
dir_dwc    <- "data/o_assen/dwc"    # Local directory for the Darwin Core dataset
```

And download the dataset from Zenodo to the local directory. Using a local package avoids having to download the data again when you encounter an issue:

```{r}
frictionless::read_package("https://zenodo.org/records/10053903/files/datapackage.json") %>%
  # Remove the large acceleration resource we won't use (and thus won't download)
  frictionless::remove_resource("acceleration") %>%
  frictionless::write_package(dir_source)
```

We then create a `package` variable pointing to the local dataset:

```{r}
package <- frictionless::read_package(file.path(dir_source, "datapackage.json"))
```

That covers the data. The metadata are derived from [DataCite](https://api.datacite.org/dois/10.5281/zenodo.10053903) using the dataset DOI. For O_ASSEN, the DOI is already stored in the package metadata:

```{r}
package$id
```

DataCite metadata does not include a contact person and rights holder, so we need to set those:

```{r}
contact <- person(
  given = "Peter",
  family = "Desmet",
  email = "peter.desmet@inbo.be",
  comment = c(ORCID = "0000-0002-8442-8025")
)
rights_holder <- "Vogelwerkgroep Assen"
```

We now have everything to convert the dataset to Darwin Core and EML:

```{r}
movepub::write_dwc(
  package = package,
  doi = package$id,
  directory = dir_dwc,
  rights_holder = rights_holder
)

movepub::write_eml(
  package = package,
  doi = package$id,
  directory = dir_dwc,
  contact = contact,
)
```

The resulting `eml.xml` file includes the metadata:

```{r}
EML::read_eml(file.path(dir_dwc, "eml.xml"))
```

The resulting `occurrence.csv` contains the Darwin Core data, created by transforming the `package` data. Some of the record level-terms at the beginning are set based on DataCite metadata and the provided `rights_holder`:

```{r}
readr::read_csv(file.path(dir_dwc, "occurrence.csv"), show_col_types = FALSE)
```

Both files can be uploaded to a GBIF IPT for publication. The dataset will use the DOI of the source dataset. See the O_ASSEN example on an [IPT](https://ipt.inbo.be/resource?r=o_assen) and at [GBIF](https://www.gbif.org/dataset/226421f2-1d29-4950-901c-aba9d0e8f2bc).
